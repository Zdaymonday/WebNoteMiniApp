{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-5eefa430\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"edit-note-form-wrapper\",\n    onClick: _cache[8] || (_cache[8] = (...args) => $options.closeForm && $options.closeForm(...args)),\n    onDragover: _cache[9] || (_cache[9] = (...args) => _ctx.dragOver && _ctx.dragOver(...args))\n  }, [_createElementVNode(\"div\", {\n    class: \"edit-note-form-inner\",\n    draggable: \"true\",\n    onClick: _cache[3] || (_cache[3] = _withModifiers(() => {}, [\"stop\"])),\n    onDragstart: _cache[4] || (_cache[4] = (...args) => $options.dragStart && $options.dragStart(...args)),\n    onDragend: _cache[5] || (_cache[5] = (...args) => $options.dragEnd && $options.dragEnd(...args)),\n    onMousedown: _cache[6] || (_cache[6] = (...args) => $options.mDown && $options.mDown(...args)),\n    onMouseup: _cache[7] || (_cache[7] = (...args) => $options.mUp && $options.mUp(...args))\n  }, [_createElementVNode(\"h3\", null, _toDisplayString($props.edit_note.title), 1 /* TEXT */), _createElementVNode(\"textarea\", {\n    rows: \"10\",\n    value: this.new_text,\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.onNoteTextChanged && $options.onNoteTextChanged(...args))\n  }, \"\\r\\n            \", 40 /* PROPS, HYDRATE_EVENTS */, _hoisted_1), _createElementVNode(\"div\", null, [_createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.closeForm && $options.closeForm(...args))\n  }, \"Abort\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.saveChanges && $options.saveChanges(...args))\n  }, \"Save changes\")])], 32 /* HYDRATE_EVENTS */)], 32 /* HYDRATE_EVENTS */);\n}","map":{"version":3,"mappings":";;;;uBACIA,oBAcM;IAdDC,KAAK,EAAC,wBAAwB;IAAEC,OAAK,yCAAEC,iDAAS;IAAGC,UAAQ,yCAAEC,uCAAQ;MACtEC,oBAYM;IAZDL,KAAK,EAAC,sBAAsB;IAACM,SAAS,EAAC,MAAM;IAAGL,OAAK,2CAAN,QAAW;IAC1DM,WAAS,yCAAEL,iDAAS;IACpBM,SAAO,yCAAEN,6CAAO;IAChBO,WAAS,yCAAEP,yCAAK;IAChBQ,SAAO,yCAAER,qCAAG;MACbG,oBAA4B,6BAAtBM,gBAAS,CAACC,KAAK,kBACrBP,oBACW;IADDQ,IAAI,EAAC,IAAI;IAAGC,KAAK,OAAOC,QAAQ;IAAGC,QAAM,yCAAEd,iEAAiB;KAAE,kBACxE,+CACAG,oBAGM,cAFFA,oBAAyC;IAAhCJ,OAAK,yCAAEC,iDAAS;KAAE,OAAK,GAChCG,oBAAkD;IAAzCJ,OAAK,yCAAEC,qDAAW;KAAE,cAAY","names":["_createElementBlock","class","onClick","$options","onDragover","_ctx","_createElementVNode","draggable","onDragstart","onDragend","onMousedown","onMouseup","$props","title","rows","value","new_text","onChange"],"sourceRoot":"","sources":["C:\\Users\\Администратор\\source\\repos\\WebNoteMiniApp\\webnoteminiapp.vue\\src\\components\\EditNoteForm.vue"],"sourcesContent":["<template>\r\n    <div class=\"edit-note-form-wrapper\" @click=\"closeForm\" @dragover=\"dragOver\" >\r\n        <div class=\"edit-note-form-inner\" draggable=\"true\"  @click.stop \r\n            @dragstart=\"dragStart\"\r\n            @dragend=\"dragEnd\"\r\n            @mousedown=\"mDown\"\r\n            @mouseup=\"mUp\">\r\n            <h3>{{edit_note.title}}</h3>\r\n            <textarea rows=\"10\"  :value=\"this.new_text\" @change=\"onNoteTextChanged\">\r\n            </textarea>\r\n            <div>\r\n                <button @click=\"closeForm\">Abort</button>\r\n                <button @click=\"saveChanges\">Save changes</button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from 'vuex';\r\n\r\nexport default {\r\n    name: \"edit-note-form\",\r\n    props: {\r\n        edit_note: [Object],\r\n        show: [Boolean],\r\n    },\r\n    methods: {\r\n        ...mapActions({\r\n            editNote: \"notes/editNote\",\r\n        }),\r\n        onNoteTextChanged(e){\r\n            this.new_text = e.target.value;\r\n        },\r\n        saveChanges() {\r\n            let new_note = {};\r\n            Object.assign(new_note, this.edit_note);\r\n            new_note.text = this.new_text;\r\n            this.editNote(new_note);\r\n            this.closeForm();\r\n        },\r\n        closeForm() {\r\n            this.$emit(\"update:show\", false)\r\n        }, \r\n        onKeyPres(e){\r\n            if(e.key === \"Escape\") this.closeForm();\r\n        },\r\n        onFormClick(e){\r\n            e.stopPropagation();\r\n        },\r\n        dragStart(e){\r\n            \r\n            console.log(e.target)\r\n        },\r\n        dragEnd(e){\r\n            let offsetX = e.dragX1 - e.dragX2;\r\n            let offsetY = e.dragY1 - e.dragY2;\r\n            let left = Number.parseFloat(e.target.style.left);\r\n            let top = Number.parseFloat(e.target.style.top);\r\n            console.log(`drag end: offsetX: ${offsetX} offset top: ${offsetY}`);\r\n            console.log(`drag end: offsetY ${left} offset top: ${top}`);\r\n            console.log(e.target);\r\n            e.target.style.left = left + offsetX + \"px\";\r\n            e.target.style.top = top + offsetY + \"px\";\r\n        },\r\n        mDown(e){\r\n            console.log(`mouse down ${e.pageX}`)\r\n            this.dragX1 = e.pageX;\r\n            this.dragY1 = e.pageY;\r\n        },\r\n        mUp(e){\r\n            this.dragX2 = e.pageX;\r\n            this.dragY2 = e.pageY;\r\n        }\r\n    },\r\n    data(){\r\n        return {\r\n            new_text: \"\",\r\n            dragX1:0,\r\n            dragY1:0,\r\n            dragX2:0,\r\n            dragY2:0,\r\n        }\r\n    },\r\n    mounted() {\r\n        this.new_text = this.edit_note.text;\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.edit-note-form-wrapper{\r\n    left: 0;right: 0; top: 0; bottom: 0;\r\n    position: fixed;\r\n    background: #76767690;\r\n}\r\n.edit-note-form-inner{\r\n    position: absolute;\r\n    border-radius: 20px;\r\n    padding: 20px;\r\n    top: 200px;\r\n    left: 100px;\r\n    background: #FFFFFFF1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: fit-content;\r\n    min-width: 30%;\r\n}\r\ntextarea{\r\n    height: max-content;\r\n    min-width: 400px;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}